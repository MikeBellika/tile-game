import {
  Board,
  getContrastTextColor,
  getRandomTile,
  getTileColor,
} from "@/hooks/useBoard"

export function encodeStateInURL(board: Board, points: number): string {
  const boardNumbers = board.flat().map((tile) => tile.value)
  const sharingString = numbersToUrlSafeString(boardNumbers)
  return `b=${sharingString}&p=${points}&s=${board.length}`
}

export function decodeStateFromURL(
  urlString: string,
): { board: Board; points: number } | undefined {
  const params = new URLSearchParams(urlString)
  const boardString = params.get("b")
  const pointsString = params.get("p")
  const sizeString = params.get("s")

  if (boardString === null || pointsString === null || sizeString === null) {
    return undefined
  }

  const points = parseInt(pointsString)
  const size = parseInt(sizeString)
  const boardNumbers = urlSafeStringToNumbers(boardString)

  if (isNaN(points) || isNaN(size) || boardNumbers.some(isNaN)) {
    return undefined
  }

  const board: Board = Array.from({ length: size }, (_, y) =>
    Array.from({ length: size }, (_, x) => {
      const index = y * size + x
      return {
        ...getRandomTile(),
        value: boardNumbers[index],
      }
    }),
  )

  return { board, points }
}

function numbersToUrlSafeString(numbers: number[]): string {
  // Assuming numbers are 1-16, decrement to make them 0-15 for bitwise operations
  const adjustedNumbers = numbers.map((n) => n - 1)
  let binaryString = ""

  // Pack numbers into a binary string
  adjustedNumbers.forEach((n) => {
    binaryString += n.toString(2).padStart(4, "0")
  })

  // Convert binary string to bytes
  const byteArray = new Uint8Array(binaryString.length / 8)
  for (let i = 0; i < byteArray.length; i++) {
    byteArray[i] = parseInt(binaryString.slice(i * 8, (i + 1) * 8), 2)
  }

  // Convert bytes to Base64 URL Safe String
  const base64String = Buffer.from(byteArray)
    .toString("base64")
    .replace(/\+/g, "-")
    .replace(/\//g, "_")
    .replace(/=+$/, "") // Trim padding

  return base64String
}
function urlSafeStringToNumbers(encodedString: string): number[] {
  // Convert Base64 URL Safe string back to Base64
  const base64String =
    encodedString.replace(/-/g, "+").replace(/_/g, "/") +
    // Optionally add padding back if required by your decoding method
    "==".substring(0, (3 * encodedString.length) % 4)

  // Decode from Base64 to bytes
  const bytes = Buffer.from(base64String, "base64")

  // Convert bytes back to a binary string
  let binaryString = ""
  bytes.forEach((byte) => {
    binaryString += byte.toString(2).padStart(8, "0")
  })

  // Unpack binary string into numbers
  const numbers = []
  for (let i = 0; i < binaryString.length; i += 4) {
    // Parse each 4-bit segment into a number, adjust back to 1-16 range
    numbers.push(parseInt(binaryString.slice(i, i + 4), 2) + 1)
  }

  return numbers
}

// Helper function to convert SVG string to Blob
function svgStringToBlob(svgString: string): Blob {
  return new Blob([svgString], { type: "image/svg+xml;charset=utf-8" })
}

// Function to generate SVG string from Board data
export function generateSvgString(
  board: Board,
  tileSize: number,
  padding: number,
): string {
  const width = board.length * (tileSize + padding) - padding
  const height = board.length * (tileSize + padding) - padding
  const interDataUrl: string = `data:font/woff2;base64,`
  let svgContent = `<svg xmlns="http://www.w3.org/2000/svg" width="${width}" height="${height}">
        <defs>
            <style type="text/css">
                @font-face {
                    font-family: 'InterSvg';
                    font-weight: bold; 
                    src: url(${interDataUrl}) format('woff2');
                }
            </style>
        </defs>`

  board.forEach((row, y) => {
    row.forEach((tile, x) => {
      const x1 = x * (tileSize + padding)
      const y1 = y * (tileSize + padding)
      const tileColor = getTileColor(tile)
      svgContent += `<g>
                <rect x="${x1}" y="${y1}" width="${tileSize}" height="${tileSize}" style="fill: ${tileColor}; ${tile.value > 9 ? "filter: drop-shadow(0px 0px 5px #ed8936) drop-shadow(2px 2px 3px gold)" : ""} " rx="3" />
                <text x="${x1 + tileSize / 2}" y="${y1 + tileSize / 2}" style="fill: ${getContrastTextColor(tileColor)}; text-anchor: middle; font-family: 'InterSvg'; font-weight: bold; dominant-baseline: middle;">
                    ${Math.pow(2, tile.value)}
                </text>
            </g>`
    })
  })

  svgContent += `</svg>`
  return svgContent
}

// Main function to convert Board to PNG File
export async function boardToPngFile(board: Board): Promise<File> {
  const tileSize: number = 44
  const padding: number = 2

  const svgString = generateSvgString(board, tileSize, padding)

  // Wait for font to load. Calling the font InterSvg because the regular font is called Inter, so that is already loaded
  // If this isn't done, the font doens't load on first share (Works when the button is clicked again)
  await document.fonts.load("bold 16px InterSvg")

  const blob = svgStringToBlob(svgString)
  const url = URL.createObjectURL(blob)

  return new Promise((resolve, reject) => {
    const img = new Image()
    img.onload = function () {
      const canvas = document.createElement("canvas")
      canvas.width = img.width
      canvas.height = img.height
      const ctx = canvas.getContext("2d")
      if (ctx) {
        ctx.drawImage(img, 0, 0)
        canvas.toBlob((blob) => {
          if (blob) {
            const file = new File([blob], "board.png", { type: "image/png" })
            resolve(file)
          } else {
            reject(new Error("Canvas to Blob conversion failed"))
          }
        }, "image/png")
      } else {
        reject(new Error("Could not get canvas context"))
      }
    }
    img.onerror = reject
    img.src = url
  })
}
